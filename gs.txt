function parseTornCityLogs() {
  // Replace 'YOUR_API_KEY' with your actual API key from Torn City
  var apiKey = 'zaIzUBEjkUFfcBis';

  // Replace 'USER_ID' with the actual user ID for which you want to fetch logs
  var userId = '2954019';

  // URL to fetch the Torn City logs
  var url = 'https://api.torn.com/user/' + userId + '?selections=log&key=' + apiKey;

  // Make the API request
  var response = UrlFetchApp.fetch(url);

  // Initialize an object to store sender IDs and their corresponding amounts
  var senderBalances = {};

  // Load processedLogs from script properties
  var scriptProperties = PropertiesService.getScriptProperties();
  var processedLogs = new Set(JSON.parse(scriptProperties.getProperty('processedLogs')) || []);

  try {
    // Parse the JSON response
    var responseData = JSON.parse(response.getContentText());
    var logs = responseData.log;

    // Function to update credits (replace this with your actual implementation)
    function updateCredits(senderId, amount) {
      // Add your logic to update credits here
      // This is a placeholder and should be replaced with your actual implementation

      // Log the credit update message
      Logger.log('Updating credits for sender: ' + senderId + ', Amount: ' + amount);

      // Update sender's balance in the object
      senderBalances[senderId] = (senderBalances[senderId] || 0) + amount;
    }

    // If you want to update a specific column in the spreadsheet, you can use the Spreadsheet service.
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    var idColumn = 1; // Assuming the sender ID is in the first column
    var amountColumn = 2; // Assuming the amount should be in the second column

    // Loop through logs
    for (var logId in logs) {
      var log = logs[logId];

      // Check if the log ID is in the processed set
      if (!processedLogs.has(logId)) {
        // Add the log ID to the set to mark it as processed
        processedLogs.add(logId);

        // Check if the log is for receiving any item
        if (log.title === 'Item receive' && log.category === 'Item sending') {
          // Check if the received item is Xanax (item ID 206)
          var receivedItems = log.data.items;
          for (var i = 0; i < receivedItems.length; i++) {
            var receivedItem = receivedItems[i];
            if (receivedItem.id === 206) {
              // Log a message for Xanax
              var senderId = log.data.sender;
              var amount = receivedItem.qty;

              // Check if senderId is defined before logging
              if (senderId) {
                // Log the message
                Logger.log(senderId + ' sent ' + amount + ' Xanax to you.');

                // Update credits for the sender
                updateCredits(senderId, amount);

                // Update the player's credits in the spreadsheet
                updateCreditsInSpreadsheet(senderId, senderBalances[senderId]);
              } else {
                Logger.log('Sender ID is undefined. Skipping log entry.');
              }
            }
          }
        }
      }
    }

    // Update credits after processing all logs
    for (var senderId in senderBalances) {
      // Check if senderId already exists in the spreadsheet
      var senderRange = sheet.getRange(1, idColumn, sheet.getLastRow() || 1, 1);
      var senderValues = senderRange.getValues().flat();

      // Convert senderValues to strings to ensure correct comparison
      var senderStrings = senderValues.map(String);

      var rowIndex = senderStrings.indexOf(senderId);

      // If senderId already exists, update the existing row; otherwise, append a new row
      if (rowIndex !== -1) {
        // Get the existing balance from the spreadsheet and add the new amount
        var existingBalance = sheet.getRange(rowIndex + 1, amountColumn).getValue();
        sheet.getRange(rowIndex + 1, amountColumn).setValue(existingBalance + senderBalances[senderId]);
      } else {
        sheet.appendRow([senderId, senderBalances[senderId]]);
      }
    }

    // Save processedLogs to script properties
    scriptProperties.setProperty('processedLogs', JSON.stringify(Array.from(processedLogs)));

    // Open the game for the user
    openScratchCardGame();

  } catch (error) {
    // Log any errors that occur during parsing
    Logger.log('Error parsing response: ' + error);
  }
}

// Function to update credits in the spreadsheet
function updateCreditsInSpreadsheet(userId, updatedCredits) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var idColumn = 1; // Assuming the sender ID is in the first column
  var amountColumn = 2; // Assuming the amount should be in the second column

  // Find the user's row in the spreadsheet
  var senderRange = sheet.getRange(1, idColumn, sheet.getLastRow() || 1, 1);
  var senderValues = senderRange.getValues().flat();
  var senderStrings = senderValues.map(String);
  var rowIndex = senderStrings.indexOf(userId);

  // If the user exists, update their credits in the spreadsheet
  if (rowIndex !== -1) {
    sheet.getRange(rowIndex + 1, amountColumn).setValue(updatedCredits);
  } else {
    Logger.log('User not found in the spreadsheet. Unable to update credits.');
  }
}

function openScratchCardGame() {
  var html = HtmlService.createHtmlOutputFromFile('game')
    .setTitle('Scratch Card Game')
    .setWidth(600)
    .setHeight(600);
  SpreadsheetApp.getUi().showModalDialog(html, 'Scratch Card Game');
}


function onLogin(userId) {
  // Implement your login logic here
  // Retrieve the user's current balance from the spreadsheet
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var idColumn = 1; // Assuming the sender ID is in the first column
  var amountColumn = 2; // Assuming the amount should be in the second column

  // Find the user's row in the spreadsheet
  var senderRange = sheet.getRange(1, idColumn, sheet.getLastRow() || 1, 1);
  var senderValues = senderRange.getValues().flat();
  var senderStrings = senderValues.map(String);
  var rowIndex = senderStrings.indexOf(userId);

  // If the user exists, return their current balance; otherwise, return 0
  if (rowIndex !== -1) {
    var currentBalance = sheet.getRange(rowIndex + 1, amountColumn).getValue();

    return currentBalance;
  } else {
    return 0;
  }
}


function onScratch(userId, updatedCredits, randomPrize) {
  // Implement logic to update credits and log winnings in the spreadsheet
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var idColumn = 1; // Assuming the sender ID is in the first column
  var amountColumn = 2; // Assuming the amount should be in the second column
  var winningsColumn = 3; // Assuming the winnings log should be in the third column

  // Find the user's row in the spreadsheet
  var senderRange = sheet.getRange(1, idColumn, sheet.getLastRow() || 1, 1);
  var senderValues = senderRange.getValues().flat();
  var senderStrings = senderValues.map(String);
  var rowIndex = senderStrings.indexOf(userId);

  // If the user exists, update their credits and log winnings in the spreadsheet
  if (rowIndex !== -1) {
    var currentBalance = sheet.getRange(rowIndex + 1, amountColumn).getValue();

    // Check if the user has enough credits to scratch a card
    if (currentBalance > 0) {
      // Find the next available row in the winnings column
      var lastRow = sheet.getLastRow();
      var nextRowIndex = lastRow + 1;

      // Get the current timestamp
      var timestamp = new Date();

      // Log winnings with timestamp in the next available row of the third column
      sheet.getRange(nextRowIndex, winningsColumn).setValue(userId + ' won: ' + randomPrize.name + ' - Congrats! at ' + timestamp);

      // Decrease the credits by 1
      var updatedCredits = currentBalance - 1;

      // Log the scratch event
      Logger.log(userId + ' scratched a card. Updated credits: ' + updatedCredits);

      // Update the balance in the spreadsheet
      sheet.getRange(rowIndex + 1, amountColumn).setValue(updatedCredits);

      // Return the updated credits
      return updatedCredits;
    } else {
      // Log a message if the user doesn't have enough credits
      Logger.log(userId + ' does not have enough credits to scratch a card.');
      return currentBalance; // Return the current balance (no change)
    }
  } else {
    Logger.log('User not found in the spreadsheet. Unable to update credits.');
    return 0; // Return 0 if the user is not found
  }
}



function doGet(e) {
  return HtmlService.createHtmlOutputFromFile('game'); // Use the name of your HTML file
}



function onOpen() {
  var ui = SpreadsheetApp.getUi();
  // Or DocumentApp or FormApp.
  ui.createMenu('Play Here')
    .addItem('Start', 'openScratchCardGame')
    .addToUi();
}
